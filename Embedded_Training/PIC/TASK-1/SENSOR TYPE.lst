CCS PCM C Compiler, Version 5.008, 5967               26-Jun-22 11:34

               Filename:   C:\Users\BOLA SHANKAR\OneDrive\Desktop\Embedded Training\TASK-1\SENSOR TYPE.lst

               ROM used:   183 words (2%)
                           Largest free fragment is 2048
               RAM used:   16 (4%) at main() level
                           23 (6%) worst case
               Stack used: 3 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   042
0003:  NOP
.................... #include <SENSOR TYPE.h> 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20MHz) 
0004:  MOVLW  31
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
....................  
....................  
....................  
.................... #byte LCD=0x08 
.................... #byte TLCD=0x88 
....................  
.................... #bit RS=0x07.6 
.................... #bit TRS=0x87.6 
....................  
.................... #bit EN=0x07.7 
.................... #bit TEN=0x87.7 
....................  
.................... #bit SW1=0x07.0 
.................... #bit TSW1=0x87.0 
.................... #bit SW2=0x07.1 
.................... #bit TSW2=0x87.1 
....................  
.................... #bit LED1=0x06.0 
.................... #bit TLED1=0x86.0 
.................... #bit LED2=0x06.1 
.................... #bit TLED2=0x86.1 
....................  
.................... #bit LED3=0x06.2 
.................... #bit TLED3=0x86.2 
.................... #bit LED4=0x06.3 
.................... #bit TLED4=0x86.3 
....................  
.................... char str[10]="COUNT : "; 
*
004D:  MOVLW  43
004E:  BCF    03.5
004F:  MOVWF  20
0050:  MOVLW  4F
0051:  MOVWF  21
0052:  MOVLW  55
0053:  MOVWF  22
0054:  MOVLW  4E
0055:  MOVWF  23
0056:  MOVLW  54
0057:  MOVWF  24
0058:  MOVLW  20
0059:  MOVWF  25
005A:  MOVLW  3A
005B:  MOVWF  26
005C:  MOVLW  20
005D:  MOVWF  27
005E:  CLRF   28
.................... VOID display(unsigned int A,unsigned int B) 
.................... { 
.................... LCD=A; 
*
0018:  MOVF   2F,W
0019:  MOVWF  08
.................... RS=B; 
001A:  BTFSS  30.0
001B:  BCF    07.6
001C:  BTFSC  30.0
001D:  BSF    07.6
.................... EN=1; 
001E:  BSF    07.7
.................... delay_ms(200); 
001F:  MOVLW  C8
0020:  MOVWF  31
0021:  CALL   004
.................... EN=0; 
0022:  BCF    07.7
0023:  RETURN
.................... } 
.................... void display_string(char *str) 
.................... { 
.................... for(int j=0;str[j]!=0;j++) 
0024:  CLRF   2D
0025:  MOVF   2D,W
0026:  ADDWF  2B,W
0027:  MOVWF  04
0028:  BCF    03.7
0029:  BTFSC  2C.0
002A:  BSF    03.7
002B:  MOVF   00,F
002C:  BTFSC  03.2
002D:  GOTO   03F
.................... { 
.................... display(str[j],1); 
002E:  MOVF   2D,W
002F:  ADDWF  2B,W
0030:  MOVWF  04
0031:  BCF    03.7
0032:  BTFSC  2C.0
0033:  BSF    03.7
0034:  MOVF   00,W
0035:  MOVWF  2E
0036:  MOVWF  2F
0037:  MOVLW  01
0038:  MOVWF  30
0039:  CALL   018
.................... delay_ms(200); 
003A:  MOVLW  C8
003B:  MOVWF  31
003C:  CALL   004
003D:  INCF   2D,F
003E:  GOTO   025
.................... } 
003F:  BCF    0A.3
0040:  BCF    0A.4
0041:  GOTO   093 (RETURN)
.................... } 
.................... void main() 
0042:  MOVF   03,W
0043:  ANDLW  1F
0044:  MOVWF  03
0045:  BSF    03.5
0046:  BSF    1F.0
0047:  BSF    1F.1
0048:  BSF    1F.2
0049:  BCF    1F.3
004A:  MOVLW  07
004B:  MOVWF  1C
004C:  BCF    03.7
.................... { 
.................... SW1=0; 
*
005F:  BCF    07.0
.................... TSW1=1; 
0060:  BSF    03.5
0061:  BSF    07.0
.................... SW2=0; 
0062:  BCF    03.5
0063:  BCF    07.1
.................... TSW2=1; 
0064:  BSF    03.5
0065:  BSF    07.1
.................... LCD=0; 
0066:  BCF    03.5
0067:  CLRF   08
.................... TLCD=0; 
0068:  BSF    03.5
0069:  CLRF   08
.................... RS=0; 
006A:  BCF    03.5
006B:  BCF    07.6
.................... TRS=0; 
006C:  BSF    03.5
006D:  BCF    07.6
.................... EN=0; 
006E:  BCF    03.5
006F:  BCF    07.7
.................... TEN=0; 
0070:  BSF    03.5
0071:  BCF    07.7
....................  
.................... LED1=0; 
0072:  BCF    03.5
0073:  BCF    06.0
.................... TLED1=0; 
0074:  BSF    03.5
0075:  BCF    06.0
.................... LED2=0; 
0076:  BCF    03.5
0077:  BCF    06.1
.................... TLED2=0; 
0078:  BSF    03.5
0079:  BCF    06.1
....................  
.................... LED3=0; 
007A:  BCF    03.5
007B:  BCF    06.2
.................... TLED3=0; 
007C:  BSF    03.5
007D:  BCF    06.2
.................... LED4=0; 
007E:  BCF    03.5
007F:  BCF    06.3
.................... TLED4=0; 
0080:  BSF    03.5
0081:  BCF    06.3
....................  
.................... display(0x0c,0); 
0082:  MOVLW  0C
0083:  BCF    03.5
0084:  MOVWF  2F
0085:  CLRF   30
0086:  CALL   018
.................... display(0x38,0); 
0087:  MOVLW  38
0088:  MOVWF  2F
0089:  CLRF   30
008A:  CALL   018
....................    while(TRUE) 
....................    { 
....................       display(0X80,0); 
008B:  MOVLW  80
008C:  MOVWF  2F
008D:  CLRF   30
008E:  CALL   018
....................       display_string(str); 
008F:  CLRF   2C
0090:  MOVLW  20
0091:  MOVWF  2B
0092:  GOTO   024
....................       if(SW1==1) 
0093:  BTFSS  07.0
0094:  GOTO   0B5
....................       { 
....................       for(int i=0;i>=0 && i<10;i++) 
0095:  CLRF   2A
0096:  MOVF   2A,W
0097:  SUBLW  09
0098:  BTFSS  03.0
0099:  GOTO   0B5
....................       { 
....................       display(0x89,0); 
009A:  MOVLW  89
009B:  MOVWF  2F
009C:  CLRF   30
009D:  CALL   018
....................       display(i,1); 
009E:  MOVF   2A,W
009F:  MOVWF  2F
00A0:  MOVLW  01
00A1:  MOVWF  30
00A2:  CALL   018
....................       if(i>=1) 
00A3:  MOVF   2A,W
00A4:  SUBLW  00
00A5:  BTFSS  03.0
....................       { 
....................       LED1=1; 
00A6:  BSF    06.0
....................       } 
....................       if(i>=5) 
00A7:  MOVF   2A,W
00A8:  SUBLW  04
00A9:  BTFSS  03.0
....................       { 
....................       LED2=1; 
00AA:  BSF    06.1
....................       } 
....................       if(i>=8) 
00AB:  MOVF   2A,W
00AC:  SUBLW  07
00AD:  BTFSS  03.0
....................       { 
....................       LED3=1; 
00AE:  BSF    06.2
....................       } 
....................       if(i>9) 
00AF:  MOVF   2A,W
00B0:  SUBLW  09
00B1:  BTFSS  03.0
....................       { 
....................       LED4=1; 
00B2:  BSF    06.3
....................       } 
00B3:  INCF   2A,F
00B4:  GOTO   096
....................       } 
....................       } 
00B5:  GOTO   08B
....................        
....................        
....................     } 
.................... } 
00B6:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
