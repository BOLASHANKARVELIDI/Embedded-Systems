CCS PCM C Compiler, Version 5.008, 5967               27-Jun-22 14:29

               Filename:   C:\Users\BOLA SHANKAR\OneDrive\Desktop\Embedded Training\TASK-1\SENSOR TYPE 3.lst

               ROM used:   243 words (3%)
                           Largest free fragment is 2048
               RAM used:   17 (5%) at main() level
                           23 (6%) worst case
               Stack used: 3 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   057
0003:  NOP
.................... #include <SENSOR TYPE 3.h> 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
*
0042:  MOVF   2C,W
0043:  CLRF   78
0044:  SUBWF  2B,W
0045:  BTFSC  03.0
0046:  GOTO   04A
0047:  MOVF   2B,W
0048:  MOVWF  77
0049:  GOTO   056
004A:  CLRF   77
004B:  MOVLW  08
004C:  MOVWF  2D
004D:  RLF    2B,F
004E:  RLF    77,F
004F:  MOVF   2C,W
0050:  SUBWF  77,W
0051:  BTFSC  03.0
0052:  MOVWF  77
0053:  RLF    78,F
0054:  DECFSZ 2D,F
0055:  GOTO   04D
0056:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20MHz) 
*
0004:  MOVLW  31
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
....................  
....................  
....................  
.................... #byte LCD=0x08 
.................... #byte TLCD=0x88 
....................  
.................... #bit RS=0x07.6 
.................... #bit TRS=0x87.6 
....................  
.................... #bit EN=0x07.7 
.................... #bit TEN=0x87.7 
....................  
.................... #bit SW1=0x07.0 
.................... #bit TSW1=0x87.0 
.................... #bit SW2=0x07.1 
.................... #bit TSW2=0x87.1 
....................  
.................... #bit LED1=0x06.0 
.................... #bit TLED1=0x86.0 
.................... #bit LED2=0x06.1 
.................... #bit TLED2=0x86.1 
....................  
.................... #bit LED3=0x06.2 
.................... #bit TLED3=0x86.2 
.................... #bit LED4=0x06.3 
.................... #bit TLED4=0x86.3 
....................  
.................... char str[10]="COUNT : "; 
*
0063:  MOVLW  43
0064:  BCF    03.5
0065:  MOVWF  20
0066:  MOVLW  4F
0067:  MOVWF  21
0068:  MOVLW  55
0069:  MOVWF  22
006A:  MOVLW  4E
006B:  MOVWF  23
006C:  MOVLW  54
006D:  MOVWF  24
006E:  MOVLW  20
006F:  MOVWF  25
0070:  MOVLW  3A
0071:  MOVWF  26
0072:  MOVLW  20
0073:  MOVWF  27
0074:  CLRF   28
.................... int count=0; 
.................... VOID display(unsigned int A,unsigned int B) 
.................... { 
.................... LCD=A; 
*
0018:  MOVF   2F,W
0019:  MOVWF  08
.................... RS=B; 
001A:  BTFSS  30.0
001B:  BCF    07.6
001C:  BTFSC  30.0
001D:  BSF    07.6
.................... EN=1; 
001E:  BSF    07.7
.................... delay_ms(200); 
001F:  MOVLW  C8
0020:  MOVWF  31
0021:  CALL   004
.................... EN=0; 
0022:  BCF    07.7
0023:  RETURN
.................... } 
.................... void display_string(char *str) 
.................... { 
.................... for(int j=0;str[j]!=0;j++) 
0024:  CLRF   2D
0025:  MOVF   2D,W
0026:  ADDWF  2B,W
0027:  MOVWF  04
0028:  BCF    03.7
0029:  BTFSC  2C.0
002A:  BSF    03.7
002B:  MOVF   00,F
002C:  BTFSC  03.2
002D:  GOTO   03F
.................... { 
.................... display(str[j],1); 
002E:  MOVF   2D,W
002F:  ADDWF  2B,W
0030:  MOVWF  04
0031:  BCF    03.7
0032:  BTFSC  2C.0
0033:  BSF    03.7
0034:  MOVF   00,W
0035:  MOVWF  2E
0036:  MOVWF  2F
0037:  MOVLW  01
0038:  MOVWF  30
0039:  CALL   018
.................... delay_ms(200); 
003A:  MOVLW  C8
003B:  MOVWF  31
003C:  CALL   004
003D:  INCF   2D,F
003E:  GOTO   025
.................... } 
003F:  BCF    0A.3
0040:  BCF    0A.4
0041:  GOTO   0A9 (RETURN)
.................... } 
.................... void main() 
*
0057:  MOVF   03,W
0058:  ANDLW  1F
0059:  MOVWF  03
005A:  CLRF   2A
005B:  BSF    03.5
005C:  BSF    1F.0
005D:  BSF    1F.1
005E:  BSF    1F.2
005F:  BCF    1F.3
0060:  MOVLW  07
0061:  MOVWF  1C
0062:  BCF    03.7
.................... { 
.................... SW1=0; 
*
0075:  BCF    07.0
.................... TSW1=1; 
0076:  BSF    03.5
0077:  BSF    07.0
.................... SW2=0; 
0078:  BCF    03.5
0079:  BCF    07.1
.................... TSW2=1; 
007A:  BSF    03.5
007B:  BSF    07.1
.................... LCD=0; 
007C:  BCF    03.5
007D:  CLRF   08
.................... TLCD=0; 
007E:  BSF    03.5
007F:  CLRF   08
.................... RS=0; 
0080:  BCF    03.5
0081:  BCF    07.6
.................... TRS=0; 
0082:  BSF    03.5
0083:  BCF    07.6
.................... EN=0; 
0084:  BCF    03.5
0085:  BCF    07.7
.................... TEN=0; 
0086:  BSF    03.5
0087:  BCF    07.7
....................  
.................... LED1=0; 
0088:  BCF    03.5
0089:  BCF    06.0
.................... TLED1=0; 
008A:  BSF    03.5
008B:  BCF    06.0
.................... LED2=0; 
008C:  BCF    03.5
008D:  BCF    06.1
.................... TLED2=0; 
008E:  BSF    03.5
008F:  BCF    06.1
....................  
.................... LED3=0; 
0090:  BCF    03.5
0091:  BCF    06.2
.................... TLED3=0; 
0092:  BSF    03.5
0093:  BCF    06.2
.................... LED4=0; 
0094:  BCF    03.5
0095:  BCF    06.3
.................... TLED4=0; 
0096:  BSF    03.5
0097:  BCF    06.3
....................  
.................... display(0x0c,0); 
0098:  MOVLW  0C
0099:  BCF    03.5
009A:  MOVWF  2F
009B:  CLRF   30
009C:  CALL   018
.................... display(0x38,0); 
009D:  MOVLW  38
009E:  MOVWF  2F
009F:  CLRF   30
00A0:  CALL   018
....................    while(TRUE) 
....................    { 
....................       display(0X80,0); 
00A1:  MOVLW  80
00A2:  MOVWF  2F
00A3:  CLRF   30
00A4:  CALL   018
....................       display_string(str); 
00A5:  CLRF   2C
00A6:  MOVLW  20
00A7:  MOVWF  2B
00A8:  GOTO   024
....................       if(SW1==1) 
00A9:  BTFSS  07.0
00AA:  GOTO   0AF
....................       { 
....................       while(SW1==1); 
00AB:  BTFSC  07.0
00AC:  GOTO   0AB
....................       count+=1; 
00AD:  MOVLW  01
00AE:  ADDWF  2A,F
....................       } 
....................       if(SW2==1) 
00AF:  BTFSS  07.1
00B0:  GOTO   0B5
....................       { 
....................       while(SW2==1); 
00B1:  BTFSC  07.1
00B2:  GOTO   0B1
....................       count-=1; 
00B3:  MOVLW  01
00B4:  SUBWF  2A,F
....................       } 
....................       display(0x89,0); 
00B5:  MOVLW  89
00B6:  MOVWF  2F
00B7:  CLRF   30
00B8:  CALL   018
....................       display((count/10)+0x30,1); 
00B9:  MOVF   2A,W
00BA:  MOVWF  2B
00BB:  MOVLW  0A
00BC:  MOVWF  2C
00BD:  CALL   042
00BE:  MOVLW  30
00BF:  ADDWF  78,W
00C0:  MOVWF  2B
00C1:  MOVWF  2F
00C2:  MOVLW  01
00C3:  MOVWF  30
00C4:  CALL   018
....................       display(0x8A,0); 
00C5:  MOVLW  8A
00C6:  MOVWF  2F
00C7:  CLRF   30
00C8:  CALL   018
....................       display((count%10)+0x30,1); 
00C9:  MOVF   2A,W
00CA:  MOVWF  2B
00CB:  MOVLW  0A
00CC:  MOVWF  2C
00CD:  CALL   042
00CE:  MOVLW  30
00CF:  ADDWF  77,W
00D0:  MOVWF  2B
00D1:  MOVWF  2F
00D2:  MOVLW  01
00D3:  MOVWF  30
00D4:  CALL   018
....................        
....................       if(count>=1) 
00D5:  MOVF   2A,W
00D6:  SUBLW  00
00D7:  BTFSC  03.0
00D8:  GOTO   0DB
....................       { 
....................       LED1=1; 
00D9:  BSF    06.0
....................       } 
00DA:  GOTO   0DC
....................       else 
....................       { 
....................       LED1=0; 
00DB:  BCF    06.0
....................       } 
....................       if(count>=5) 
00DC:  MOVF   2A,W
00DD:  SUBLW  04
00DE:  BTFSC  03.0
00DF:  GOTO   0E2
....................       { 
....................       LED2=1; 
00E0:  BSF    06.1
....................       } 
00E1:  GOTO   0E3
....................       else 
....................       { 
....................       LED2=0; 
00E2:  BCF    06.1
....................       } 
....................       if(count>=8) 
00E3:  MOVF   2A,W
00E4:  SUBLW  07
00E5:  BTFSC  03.0
00E6:  GOTO   0E9
....................       { 
....................       LED3=1; 
00E7:  BSF    06.2
....................       } 
00E8:  GOTO   0EA
....................       else 
....................       { 
....................       LED3=0; 
00E9:  BCF    06.2
....................       } 
....................       if(count>9) 
00EA:  MOVF   2A,W
00EB:  SUBLW  09
00EC:  BTFSC  03.0
00ED:  GOTO   0F0
....................       { 
....................       LED4=1; 
00EE:  BSF    06.3
....................       } 
00EF:  GOTO   0F1
....................       else 
....................       { 
....................       LED4=0; 
00F0:  BCF    06.3
....................       } 
00F1:  GOTO   0A1
....................        
....................     } 
.................... } 
00F2:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
