CCS PCM C Compiler, Version 5.008, 5967               03-Jul-22 18:44

               Filename:   C:\Users\BOLA SHANKAR\OneDrive\Desktop\Embedded Training\UART\UART-RX LEDs.lst

               ROM used:   243 words (3%)
                           Largest free fragment is 2048
               RAM used:   18 (5%) at main() level
                           22 (6%) worst case
               Stack used: 3 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   043
0003:  NOP
.................... #include <UART-RX LEDs.h> 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20MHz) 
0004:  MOVLW  30
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
....................  
....................  
....................  
.................... #bit LED1=0x06.2 
.................... #bit TLED1=0x86.2 
....................  
.................... #bit LED2=0x06.3 
.................... #bit TLED2=0x86.3 
....................  
.................... #bit LED3=0x06.4 
.................... #bit TLED3=0x86.4 
....................  
.................... #bit LED4=0x06.5 
.................... #bit TLED4=0x86.5 
....................  
.................... #bit LED5=0x06.6 
.................... #bit TLED5=0x86.6 
....................  
.................... #bit LED6=0x06.7 
.................... #bit TLED6=0x86.7 
....................  
.................... #byte LCD=0X08 
.................... #byte TLCD=0X88 
....................  
.................... #bit RS=0X06.0 
.................... #bit TRS=0X86.0 
....................  
.................... #bit EN=0X06.1 
.................... #bit TEN=0X86.1 
....................  
.................... #bit tx=0x07.6 
.................... #bit Ttx=0x87.6 
....................  
.................... #bit rx=0x07.7 
.................... #bit Trx=0x87.7 
....................  
....................  
....................  
.................... #byte SPBRG=0x99 
.................... #byte TXREG=0x19 
.................... #byte RCREG=0x1A 
....................  
.................... #bit TXIF=0x0C.4 
.................... #bit RCIF=0x0C.5 
....................  
.................... #byte TXSTA=0x98 
.................... #byte RCSTA=0x18 
....................  
.................... char data[11]="ECE_QISCET"; 
*
004E:  MOVLW  45
004F:  BCF    03.5
0050:  MOVWF  20
0051:  MOVLW  43
0052:  MOVWF  21
0053:  MOVLW  45
0054:  MOVWF  22
0055:  MOVLW  5F
0056:  MOVWF  23
0057:  MOVLW  51
0058:  MOVWF  24
0059:  MOVLW  49
005A:  MOVWF  25
005B:  MOVLW  53
005C:  MOVWF  26
005D:  MOVLW  43
005E:  MOVWF  27
005F:  MOVLW  45
0060:  MOVWF  28
0061:  MOVLW  54
0062:  MOVWF  29
0063:  CLRF   2A
.................... char v; 
....................  
.................... void display(unsigned int A,unsigned int B) 
.................... { 
.................... LCD=A; 
*
0018:  MOVF   2E,W
0019:  MOVWF  08
.................... RS=B; 
001A:  BTFSS  2F.0
001B:  BCF    06.0
001C:  BTFSC  2F.0
001D:  BSF    06.0
.................... EN=1; 
001E:  BSF    06.1
.................... delay_ms(200); 
001F:  MOVLW  C8
0020:  MOVWF  30
0021:  CALL   004
.................... EN=0; 
0022:  BCF    06.1
.................... delay_ms(200); 
0023:  MOVLW  C8
0024:  MOVWF  30
0025:  CALL   004
0026:  RETURN
.................... } 
....................  
....................  
.................... void transmit(char a) 
.................... { 
.................... TXREG=a; 
*
003D:  MOVF   2E,W
003E:  MOVWF  19
.................... while(TXIF==0); 
003F:  BTFSS  0C.4
0040:  GOTO   03F
.................... TXIF=0; 
0041:  BCF    0C.4
0042:  RETURN
.................... } 
....................  
....................  
.................... int receive() 
.................... { 
.................... while(RCIF==0); 
*
0027:  BTFSS  0C.5
0028:  GOTO   027
.................... RCIF=0; 
0029:  BCF    0C.5
.................... v=RCREG; 
002A:  MOVF   1A,W
002B:  MOVWF  2B
.................... display(0x80,0); 
002C:  MOVLW  80
002D:  MOVWF  2E
002E:  CLRF   2F
002F:  CALL   018
.................... display(v,1); 
0030:  MOVF   2B,W
0031:  MOVWF  2E
0032:  MOVLW  01
0033:  MOVWF  2F
0034:  CALL   018
.................... delay_ms(200); 
0035:  MOVLW  C8
0036:  MOVWF  30
0037:  CALL   004
.................... return v; 
0038:  MOVF   2B,W
0039:  MOVWF  78
003A:  BCF    0A.3
003B:  BCF    0A.4
003C:  GOTO   0A1 (RETURN)
....................  
.................... } 
....................  
....................  
.................... void main() 
*
0043:  MOVF   03,W
0044:  ANDLW  1F
0045:  MOVWF  03
0046:  BSF    03.5
0047:  BSF    1F.0
0048:  BSF    1F.1
0049:  BSF    1F.2
004A:  BCF    1F.3
004B:  MOVLW  07
004C:  MOVWF  1C
004D:  BCF    03.7
.................... { 
.................... LED1=0; 
*
0064:  BCF    06.2
.................... TLED1=0; 
0065:  BSF    03.5
0066:  BCF    06.2
.................... LED2=0; 
0067:  BCF    03.5
0068:  BCF    06.3
.................... TLED2=0; 
0069:  BSF    03.5
006A:  BCF    06.3
.................... LED3=0; 
006B:  BCF    03.5
006C:  BCF    06.4
.................... TLED3=0; 
006D:  BSF    03.5
006E:  BCF    06.4
.................... LED4=0; 
006F:  BCF    03.5
0070:  BCF    06.5
.................... TLED4=0; 
0071:  BSF    03.5
0072:  BCF    06.5
.................... LED5=0; 
0073:  BCF    03.5
0074:  BCF    06.6
.................... TLED5=0; 
0075:  BSF    03.5
0076:  BCF    06.6
.................... LEd6=0; 
0077:  BCF    03.5
0078:  BCF    06.7
.................... TLED6=0; 
0079:  BSF    03.5
007A:  BCF    06.7
....................  
.................... LCD=0; 
007B:  BCF    03.5
007C:  CLRF   08
.................... TLCD=0; 
007D:  BSF    03.5
007E:  CLRF   08
....................  
.................... RS=0; 
007F:  BCF    03.5
0080:  BCF    06.0
.................... TRS=0; 
0081:  BSF    03.5
0082:  BCF    06.0
....................  
.................... EN=0; 
0083:  BCF    03.5
0084:  BCF    06.1
.................... TEN=0; 
0085:  BSF    03.5
0086:  BCF    06.1
....................  
.................... Ttx=0; 
0087:  BCF    07.6
.................... Trx=1; 
0088:  BSF    07.7
....................  
.................... display(0x0c,0); 
0089:  MOVLW  0C
008A:  BCF    03.5
008B:  MOVWF  2E
008C:  CLRF   2F
008D:  CALL   018
.................... display(0x38,0); 
008E:  MOVLW  38
008F:  MOVWF  2E
0090:  CLRF   2F
0091:  CALL   018
.................... display(0x80,0); 
0092:  MOVLW  80
0093:  MOVWF  2E
0094:  CLRF   2F
0095:  CALL   018
....................  
.................... TXSTA=0x26; 
0096:  MOVLW  26
0097:  BSF    03.5
0098:  MOVWF  18
.................... RCSTA=0x90; 
0099:  MOVLW  90
009A:  BCF    03.5
009B:  MOVWF  18
.................... SPBRG=129; 
009C:  MOVLW  81
009D:  BSF    03.5
009E:  MOVWF  19
....................  
....................  
.................... while(true) 
.................... { 
.................... receive(); 
009F:  BCF    03.5
00A0:  GOTO   027
.................... if(v>=(0x30+1)){ 
00A1:  MOVF   2B,W
00A2:  SUBLW  30
00A3:  BTFSC  03.0
00A4:  GOTO   0A7
.................... LED1=1; 
00A5:  BSF    06.2
.................... } 
00A6:  GOTO   0A8
.................... else{ 
.................... LED1=0; 
00A7:  BCF    06.2
.................... } 
.................... if(v>=(0x30+2)){ 
00A8:  MOVF   2B,W
00A9:  SUBLW  31
00AA:  BTFSC  03.0
00AB:  GOTO   0AE
.................... LED2=1; 
00AC:  BSF    06.3
.................... } 
00AD:  GOTO   0AF
.................... else{ 
.................... LED2=0; 
00AE:  BCF    06.3
.................... } 
.................... if(v>=(0x30+3)){ 
00AF:  MOVF   2B,W
00B0:  SUBLW  32
00B1:  BTFSC  03.0
00B2:  GOTO   0B5
.................... LED3=1; 
00B3:  BSF    06.4
.................... } 
00B4:  GOTO   0B6
.................... else{ 
.................... LED3=0; 
00B5:  BCF    06.4
.................... } 
.................... if(v>=(0x30+4)){ 
00B6:  MOVF   2B,W
00B7:  SUBLW  33
00B8:  BTFSC  03.0
00B9:  GOTO   0BC
.................... LED4=1; 
00BA:  BSF    06.5
.................... } 
00BB:  GOTO   0BD
.................... else{ 
.................... LED4=0; 
00BC:  BCF    06.5
.................... } 
.................... if(v>=(0x30+5)){ 
00BD:  MOVF   2B,W
00BE:  SUBLW  34
00BF:  BTFSC  03.0
00C0:  GOTO   0C3
.................... LED5=1; 
00C1:  BSF    06.6
.................... } 
00C2:  GOTO   0C4
.................... else{ 
.................... LED5=0; 
00C3:  BCF    06.6
.................... } 
.................... if(v>=(0x30+6)){ 
00C4:  MOVF   2B,W
00C5:  SUBLW  35
00C6:  BTFSC  03.0
00C7:  GOTO   0CA
.................... LED6=1; 
00C8:  BSF    06.7
.................... } 
00C9:  GOTO   0CB
.................... else{ 
.................... LED6=0; 
00CA:  BCF    06.7
.................... } 
....................  
.................... display(0xC0,0); 
00CB:  MOVLW  C0
00CC:  MOVWF  2E
00CD:  CLRF   2F
00CE:  CALL   018
.................... for(int j=0;data[j]!=0;j++) 
00CF:  CLRF   2C
00D0:  MOVLW  20
00D1:  ADDWF  2C,W
00D2:  MOVWF  04
00D3:  BCF    03.7
00D4:  MOVF   00,F
00D5:  BTFSC  03.2
00D6:  GOTO   0EB
.................... { 
.................... transmit(data[j]); 
00D7:  MOVLW  20
00D8:  ADDWF  2C,W
00D9:  MOVWF  04
00DA:  BCF    03.7
00DB:  MOVF   00,W
00DC:  MOVWF  2D
00DD:  MOVWF  2E
00DE:  CALL   03D
.................... display(data[j],1); 
00DF:  MOVLW  20
00E0:  ADDWF  2C,W
00E1:  MOVWF  04
00E2:  BCF    03.7
00E3:  MOVF   00,W
00E4:  MOVWF  2D
00E5:  MOVWF  2E
00E6:  MOVLW  01
00E7:  MOVWF  2F
00E8:  CALL   018
00E9:  INCF   2C,F
00EA:  GOTO   0D0
.................... } 
.................... transmit('\r'); 
00EB:  MOVLW  0D
00EC:  MOVWF  2E
00ED:  CALL   03D
.................... delay_ms(200); 
00EE:  MOVLW  C8
00EF:  MOVWF  30
00F0:  CALL   004
00F1:  GOTO   0A0
....................  
....................  
.................... } 
.................... } 
....................  
00F2:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
